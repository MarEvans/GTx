"""

In this problem you, can simulate a simplified airport security system at a busy airport. Passengers arrive
according to a Poisson distribution with λ1 = 5 per minute (i.e., mean interarrival rate µ1 = 0.2 minutes)
to the ID/boarding-pass check queue, where there are several servers who each have exponential
service time with mean rate µ2 = 0.75 minutes. [Hint: model them as one block that has more than one
resource.] After that, the passengers are assigned to the shortest of the several personal-check queues,
where they go through the personal scanner (time is uniformly distributed between 0.5 minutes and 1
minute).

Use the Arena software (PC users) or Python with SimPy (PC or Mac users) to build a simulation of the
system, and then vary the number of ID/boarding-pass checkers and personal-check queues to
determine how many are needed to keep average wait times below 15 minutes. [If you’re using SimPy,
or if you have access to a non-student version of Arena, you can use λ1 = 50 to simulate a busier airport.]

"""

#import packages
import random
import simpy

# System constraints
NUM_SERV = 5                    # number of servers
NUM_SCAN = 10                   # number of scanners

# Rates
ARRIVAL_RATE = 5                # passengers per minute
SERVICE_RATE = 0.75             # mean service time
SCANNERTIME_MIN = 0.5           # minimum time for personal scanner in minutes
SCANNERTIME_MAX = 1             # maximum time for personal scanner in minutes
T_INTER = 7                     # Create a passenger every ~7 minutes
SIM_TIME = 20                   # Simulation time in minutes

class AirportSecuritySystem:
    """An airport security system with a limited number of servers and scanners."""

    def __init__(self, env, num_serv, num_scan):
        self.env = env
        self.servers = simpy.Resource(env, capacity=num_serv)
        self.scanners = [simpy.Resource(env, capacity=1) for _ in range(num_scan)]

    def id_check(self, passenger):
        """The ID check process."""
        start_time = self.env.now
        yield self.env.timeout(random.expovariate(1 / SERVICE_RATE))
        wait_time = self.env.now - start_time
        print(f'Passenger {passenger} waited for ID check for {wait_time:.2f} minutes.')

    def personal_check(self, passenger):
        """The personal check process."""
        start_time = self.env.now
        yield self.env.timeout(random.uniform(SCANNERTIME_MIN, SCANNERTIME_MAX))
        wait_time = self.env.now - start_time
        print(f'Passenger {passenger} waited for personal check for {wait_time:.2f} minutes.')

def passenger(env, name, airport):
    """A passenger process arrives at the airport and goes through the security process."""
    print(f'{name} arrives at the airport at {env.now:.2f}.')
    with airport.servers.request() as request:
        yield request
        print(f'{name} starts ID check at {env.now:.2f}.')
        yield env.process(airport.id_check(name))
        print(f'{name} ID check finished at {env.now:.2f}.')

    # Choose the shortest personal check queue
    chosen_scanner = min(airport.scanners, key=lambda s: len(s.queue))
    with chosen_scanner.request() as request:
        yield request
        print(f'{name} starts personal check at {env.now:.2f}.')
        yield env.process(airport.personal_check(name))
        print(f'{name} personal check finished at {env.now:.2f}.')

def passenger_generator(env, airport):
    """Generate passengers arriving at the airport."""
    passenger_count = 0
    while True:
        yield env.timeout(random.expovariate(1 / ARRIVAL_RATE))
        passenger_count += 1
        env.process(passenger(env, f'Passenger {passenger_count}', airport))

def setup(env, num_serv, num_scan, t_inter):
    """Create the airport security system and generate initial passengers."""
    airport = AirportSecuritySystem(env, num_serv, num_scan)

    # Generate initial passengers
    passenger_count = 0
    while True:
        yield env.timeout(random.randint(t_inter - 2, t_inter + 2))
        passenger_count += 1
        env.process(passenger(env, f'Passenger {passenger_count}', airport))

# Setup and start the simulation
print('Airport Security System')
print('Simulation started...\n')

random.seed()  # Use current system time as seed for random number generation

# Create an environment and start the setup process
env = simpy.Environment()
env.process(setup(env, NUM_SERV, NUM_SCAN, T_INTER))

# Execute the simulation
env.run(until=SIM_TIME)

print('\nSimulation completed.')
