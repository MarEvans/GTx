Sales_dataset = read.csv("large_sales_dataset.csv", header=TRUE) #reads data
Sales_dataset$Product_Category=as.factor(Sales_dataset$Product_Category)
Sales_dataset$Customer_Gender=as.factor(Sales_dataset$Customer_Gender)
Sales_dataset$Store_Location=as.factor(Sales_dataset$Store_Location)
head(Sales_dataset)

#build simple linear regression model on training dataset
model1 <- lm(Satisfaction_Score~Purchase_Amount, trainData_sales)
summary(model1)

## linearity assumption
#plot predicting values vs residuals
ggplot(data = data.frame(Residuals = model1$residuals, Purchase_Amount = trainData_sales$Purchase_Amount), aes(Purchase_Amount, Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red")+
  labs(x = "Purchase Amount", y = "Residuals", title = "Purchase Amount vs. Residuals", subtitle = "Linearity Check")

#check for constant variance and uncorrelated errors
ggplot(model1, aes(model1$fitted.values, model1$residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red")+
  labs(x = "Fitted Values", y = "Residuals", title = "Fitted Values vs. Residuals", subtitle = "Constant Variance Check")

## normality assumption
#normal QQ plot with a pointwise confidence envelope
ggplot(model1, aes(sample = model1$residuals)) +
    stat_qq_band(bandType = "pointwise", fill = "lightpink") +
    stat_qq_line(color = "red", size = 0.5) +
    stat_qq_point(shape= 1, size= 1) +
    labs(x = "Norm Quantiles", y = "Sample Quantiles", title = "Normal QQ Plot of Residuals", subtitle = "Normality Check")

# Create a histogram of residuals
ggplot(data = data.frame(Residuals = model1$residuals), aes(x = Residuals)) +
    geom_histogram(binwidth = 0.5, color="black",fill="lightgray") + #bin = 0.5
    labs(x = "Residuals", y = "Frequency", title = "Histogram of Residuals", subtitle = "Normality Check")

#compute confidence interval for regression coefficient of Purchase amount
confint(model1, 'Purchase_Amount', level=0.95)

#check correlation
cor(trainData_sales$Purchase_Amount, trainData_sales$Satisfaction_Score)

## Box-Cox transformation
bc<-boxcox(lm(trainData_sales$Satisfaction_Score~ trainData_sales$Purchase_Amount))

#find optimal Î» value rounded to the nearest half integer
lambda <- bc$x[which.max(bc$y)]

#round to nearest half integer
0.5 * round(lambda * 2)

#build linear regression model on log transformed x and y
model2 <-lm(log(trainData_sales$Satisfaction_Score) ~ log(trainData_sales$Purchase_Amount))
summary(model2)

## model diagnostics on model2

#df of log transformed values
logdf <- data.frame(
  Residuals = model2$residuals,
  log_x = log(trainData_sales$Purchase_Amount),
  log_y = log(trainData_sales$Satisfaction_Score)
)
##check for linearity
#plot predicting values vs residuals
logpr_plot<- ggplot(data = logdf, aes(log_x, Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red")+
  labs(x = "Log[Purchase Amount]", y = "Residuals", title = "Log-Transformed Predictor vs. Residuals", subtitle = "Linearity Check")

#check for constant variance and uncorrelated errors
#plot residuals vs fitted
logres_plot<-ggplot(model2, aes(model2$fitted.values, model2$residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "orange")+
  labs(x = "Fitted Values", y = "Residuals", title = "Residuals vs. Fitted Values", subtitle = "Constant Variance Check")

##check normality
#histogram of residuals
loghist<- ggplot(data = model2, aes(x = model2$residuals)) +
    geom_histogram(binwidth = 0.2, color="black",fill="lightgray") + #bin = 0.2
    labs(x = "Residuals", y = "Frequency", title = "Histogram of Residuals", subtitle = "Normality Check")

#normal QQ plot with a pointwise confidence envelope
qq <- ggplot(model2, aes(sample = model2$residuals)) +
    stat_qq_band(bandType = "pointwise", fill = "lightblue") +
    stat_qq_line(color = "darkblue", size = 0.5) +
    stat_qq_point(shape= 1, size= 1) +
    labs(x = "Norm Quantiles", y = "Sample Quantiles", title = "Normal QQ Plot of Residuals", subtitle = "Normality Check")

grid.arrange(logpr_plot, logres_plot, loghist, qq, nrow = 2)  #arrange plots in one window

cor(logdf$log_x, logdf$log_y)

#predict satisfaction score for the test dataset
m1.pred <- predict(model1, testData_sales[,-8])

#create dataframe with both the predicted and observed values
Predicted_Actual <- data.frame(predicted = m1.pred,
                       observed = testData_sales$Satisfaction_Score)
head(Predicted_Actual,10)

#calculate the squared errors
Predicted_Actual<- Predicted_Actual %>% mutate(squared_error = (observed - predicted)^2)

#standard deviation of predictions
sd(Predicted_Actual$predicted)
